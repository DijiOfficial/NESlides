player_data:
;      Y   tile#   attribs     X
.byte $51,  $03,  %00000001,  $08
.byte $50,  $01,  %00000000,  $00
.byte $50,  $01,  %01000000,  $08
.byte $58,  $02,  %00000000,  $00
.byte $58,  $02,  %01000000,  $08

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subroutine to load the player into OAM-RAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.proc load_player
    ldx #0
loop:
    lda player_data,x                   ; We fetch bytes from player_data
    sta oam,x                           ; We store the bytes starting at OAM address oam
    inx                                 ; ++x
    cpx #20
    bne loop                            ; Loop 16 times (4 hardware sprites, 4 bytes each)
    rts
.endproc

;===================================================================================================
; Subroutine to handle player inputs.
;===================================================================================================
.proc handle_player_input
; Handle shooting and Up/Down
    ON_BUTTON_RELEASED PAD_A, SHOOT_BULLET

    ON_BUTTON_PRESSED PAD_U, MOVE_UP
    ON_BUTTON_PRESSED PAD_D, MOVE_DOWN

; Check if player controls are active first then move Left/Right

    lda var_bools                       ; Load bools
    and #%00000010                      ; Check if input is fun or not
    beq @return                         ; if not return

    ON_BUTTON_PRESSED PAD_L, MOVE_LEFT
    ON_BUTTON_PRESSED PAD_R, MOVE_RIGHT

@return:
    rts
.endproc

.proc update_player
    @player_bottom_left_x     = oam + 15
    @player_bottom_left_y     = oam + 12
    @player_bottom_right_x    = oam + 19
    @player_bottom_right_y    = oam + 16
    @player_top_left_x        = oam + 7
    @player_top_left_y        = oam + 4
    @player_top_right_x       = oam + 11
    @player_top_right_y       = oam + 8
    @player_cigar_x           = oam + 3
    @player_cigar_y           = oam

    lda var_player_x                    ; Load player x position
    sta @player_bottom_left_x           ; Set the left sprites to x
    sta @player_top_left_x
    clc
    adc #8                              ; Add 8 for the right sprites
    sta @player_bottom_right_x          ; Set the right sprites to x + 8
    sta @player_top_right_x
    sta @player_cigar_x                 ; Cigar too is a right sprite

    lda var_player_y                    ; Load player y position
    sta @player_top_left_y              ; Set the top sprites to y
    sta @player_top_right_y
    sta @player_cigar_y                 ; Cigar is also a top sprite
    clc
    adc #8                              ; Add 8 for the bottom sprites
    sta @player_bottom_left_y           ; Set the bottom sprites to y + 8   
    sta @player_bottom_right_y

@return:
    rts                                 ; return
.endproc
