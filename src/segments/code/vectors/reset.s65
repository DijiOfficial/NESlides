;===================================================================================================
; RESET is the entry point where the program starts, triggered when the system is powered on or reset.
;===================================================================================================
.proc reset
	sei                                ; disable IRQs
	lda #0
	sta PPU_CONTROL                    ; set all the PPU miscellaneous settings to 0
	sta PPU_MASK                       ; disable all the PPU rendering settings
	sta APU_DM_CONTROL                 ; disable DMC IRQs

	lda #$40                           ; disable APU frame IRQs
	sta JOYPAD2
	
	cld                                ; Disable decimal mode

	ldx #$FF
	txs                                ; Initialise the stack

    lda #0
	ldx #0
clear_ram:                             ; Clear the RAM (cannot be a subroutine as it clears the stack as well)
	sta $0000, x
	sta $0100, x
	sta $0200, x
	sta $0300, x
	sta $0400, x
	sta $0500, x
	sta $0600, x
	sta $0700, x
	inx
	bne clear_ram

@init_player_pos:
	ldx #4                             ; load 4 in X (position of the top left sprite of the player)
	lda player_data, x                 ; Check player position y in raw data
	sta var_player_y                   ; Set player position y variable
	inx                                ;
	inx                                ; x+3 to go to X position of sprite in the raw data
	inx                                ;
	lda player_data, x                 ; Load player position x variable
	sta var_player_x                   ; Set player position x variable

@init_bools:
	lda var_bools
	ora #%00000011                     ; Setting the boolean for firing to true by default bit 0/ Setting fun mode for controls bit 1
	sta var_bools	

@init_player_info:
	lda var_player_info
	ora #%00000101                     ; Setting the player to default right movement and Bool to fun mode
	sta var_player_info

@init_gamestate:
	lda #0
	sta var_gamestate					; Setting game state to MENU

    jsr clear_oam                      ; Clear the local OAM

	ldy #2
	jsr wait_vblank_y_times            ; Wait for the first 2 VBlanks to let the PPU stabilise before writing to it

    jsr transfer_oam                   ; Transfer the local, now cleared, OAM data into the PPU to reduce the visible artifacts at start
    jsr clear_nametable                ; Clear the nametable 1
    jsr clear_attribute_table          ; Clear the attribute table 1
    jsr copy_chr_tiles                 ; Copy CHR tiles into CHR RAM
    jsr copy_palette                   ; Copy the palette to the PPU

    INIT_SOUND_ENGINE                  ; Intialise the sound engine (doing this late to take advantage of the PPU stabilisation time; we let the APU stabilise as well)
	
    SELECT_SONG SONG_1                 ; Set the default song and FX
    SELECT_FX FX_1

    lda #%10000000
    sta PPU_CONTROL                    ; Enable VBlank NMIs

	jmp main
.endproc

.proc clear_oam
	lda #$FF
	ldx #0
loop:
	sta oam, x
	inx
	inx
	inx
	inx
	bne loop

	rts
.endproc

.proc wait_vblank_y_times
    bit PPU_STATUS
    bpl wait_vblank_y_times
    dey
    bne wait_vblank_y_times

    rts
.endproc

.proc clear_nametable
    SET_PPU_ADDRESS NT1_ADDRESS

	lda #0
	ldy #30
row_loop:
	ldx #32

col_loop:
	sta PPU_DATA
	dex
	bne col_loop

	dey
	bne row_loop

	rts
.endproc

.proc clear_attribute_table
    SET_PPU_ADDRESS NT1_ATTR

    lda #0
	ldx #64
loop:
	sta PPU_DATA
	dex
	bne loop

	rts
.endproc

.proc copy_chr_tiles
	STORE_ADDRESS tiles_chr, temp_00_ptr ; load the source address into a pointer in zero page

    SET_PPU_ADDRESS PT1_ADDRESS

    ldx #32                            ; number of 256-byte pages to copy
loop:
    lda (temp_00_ptr),y                ; copy one byte
    sta PPU_DATA
    iny
    bne loop                           ; repeat until we finish the page
    inc temp_00_ptr+1                  ; go to the next page
    dex
    bne loop                           ; repeat until we've copied enough pages

    LOAD_SPRITE player_data, 5, 0
    LOAD_SPRITE text_arrow, 1, 20
    jsr load_bullets                   ; Call load_bullet subroutine to load the bullet into OAM-RAM

	rts
.endproc

.proc copy_palette
    SET_PPU_ADDRESS PAL_ADDRESS

transfer_palette:
    lda default_palette,X
    sta PPU_DATA
    inx
    cpx #32
    bne transfer_palette

	rts
.endproc