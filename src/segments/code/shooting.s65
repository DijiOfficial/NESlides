; Sprite Attribute Byte:
;-----------------------
; 76543210
; |||   ||
; |||   ++- Color Palette of sprite. Choose which set of 4 from the 16 colors to use
; |||
; ||+------ Priority (0: in front of background; 1: behind background)
; |+------- Flip sprite horizontally
; +-------- Flip sprite vertically

bullet_data:
;      Y   tile#   attribs     X
.byte $F0,  $03,  %00000001,  $50           ; Horizontal bullet

;===================================================================================================
; Subroutine to load Bullet Sprites into OAM-RAM starting at $0200. 
; The function will load one sprite then loop back to load the next one until 6 bullets are loaded in OAM
;===================================================================================================
.proc load_bullets
    ldx #0                                  ; Reset X
	ldy #0                                  ; Reset Y
loop_sprite:
    lda bullet_data,x                       ; We fetch bytes from the SpriteData lookup table
    sta temp_00                   			; Store the value for now
    stx temp_01                           	; Store X
    txa                                     ;
    pha                                     ; Push A on stack
    tya                                     ; 
    pha                                     ; Push Y on stack
; we now want to calculate the position of the sprite x = x + y * 4
	MULTIPLY_X_BY_4
    clc                                     ; Clear Carry
    adc temp_01                           	; Add X back to Y * 4
    tax                                     ; Assign X + Y * 4 back to X => X = X + Y * 4

    pla                                     ;
    tay                                     ; Restore Y

    lda temp_00                   			; Reload the value we want to store
    sta oam ,x                              ; We store the bytes starting at OAM address $0200 with offset X

    PLA                                     ; 
    TAX                                     ; Restore X

    inx                                     ; ++x
    cpx #4                                  ; X == 4?
    bne loop_sprite                         ; Loop 4 times (1 hardware sprite, 4 bytes each)
    ldx #0                                  ; Reset X
	iny                                     ; ++y
    cpy #6                                  ; Y == 6? How many times we want to repeat this copy
	bne load_bullets::loop_sprite
    rts                                     ; return
.endproc

;===================================================================================================
; Subroutine to find the background tile on which the middle pixel of the current bullet is.
;===================================================================================================
.proc find_bg_tile_position
; Step 1: Calculate column index
    lda oam + 3, x                      	; Get X position of first sprite
	clc 
	adc #4									; Set check to center pixel X axis
    lsr a                               	; Divide by 2 (shift right once)
    lsr a                               	; Divide by 4
    lsr a                               	; Divide by 8 (now A = column index)
	sta temp_00      						; Temporarily store the column index for addition later

; Step 2: Calculate row index
    lda oam, x                          	; Get Y position of first sprite
	clc 
	adc #4									; Set check to center pixel Y axis
    lsr a                               	; Divide by 2 (shift right once)
    lsr a                               	; Divide by 4
    lsr a                               	; Divide by 8 (now A = row index)
    tay                                 	; Transfer to Y for later multiplication

; Step 3: Compute tile position = row (Y) Ã— 32 + column (temp_00)
    ldx #$20                                ; Clear X (setting it to nametable high byte location)
    lda #00                                 ; Clear A
	cpy #00                                 ; if Y == 0
	beq :++                                	; Don't multiply
multiply_loop:                              ; Else loop multiply
    clc                                     ; Clear Carry
	adc #32                                 ; Add 32
	bne :+                                  ; Check if zero flag is set
    inx                                     ; ++X
	:
	dey                                     ; --Y    
	beq:+                                   ; if Y == 0 we're done
	jmp find_bg_tile_position::multiply_loop
:

    clc                                     ; Clear Carry
	adc temp_00                           	; Add X (temp_00)
	;; TODO add to X the correct nametable location (if we switch nametables), currently defaulting to $2000
	;; TODO reverse the order lowbyte then high byte, then change the macro calling this to use the Adam one
	stx temp_00_ptr                 		; store X as the highbyte of the ptr
	sta temp_00_ptr + 1             		; Store A as the lowbyte of the ptr

  rts                                       ; return
.endproc

;===================================================================================================
; Subroutine to rotate the bullet to the correct direction.
;===================================================================================================
.proc rotate_bullet
	@right_direction 	    = %00000001
	@down_direction 	    = %00000010
	@left_direction 	    = %00000011
    ; Hard coding the bullet location, not sure if there is another way
    @bullet_horizontal_tile = $03
    @bullet_vertical_tile   = $04
    @bullet_tile_location   = oam + 1
    @bullet_attribute       = oam + 2

    
	lda #%00111111                      ; First reset whatever rotation the bullet might have
	and @bullet_attribute, x            ; Change the attribute 
	sta @bullet_attribute, x

	lda var_player_info                 ; Load player info
	and #%00000011						; Only keep the direction
	beq @set_up					        ; If bullet is direction up (%00000000) rotate 

	cmp #@right_direction				; If bullet is direction right, rotate 
	beq @set_right

	cmp #@down_direction				; If bullet is direction down, rotate 
	beq @set_dowm

	cmp #@left_direction				; If bullet is direction left, rotate 
	beq @set_left


@set_up:
    lda #@bullet_vertical_tile          ; Load the corresponding tile
    sta @bullet_tile_location, x        ; Store it as the tile location

    jmp @end_rotation                   ; Return
@set_right:
    lda #@bullet_horizontal_tile
    sta @bullet_tile_location, x

    jmp @end_rotation
@set_dowm:
    lda #@bullet_vertical_tile
    sta @bullet_tile_location, x

	lda #%11000000                      ; Set the vertical/horizontal flip accordingly
	ora @bullet_attribute, x            ; Change the attribute 
	sta @bullet_attribute, x

    jmp @end_rotation 
@set_left:
    lda #@bullet_horizontal_tile
    sta @bullet_tile_location, x    
	
	lda #%01000000 
	ora @bullet_attribute, x           
	sta @bullet_attribute, x

@end_rotation:
	rts
.endproc

;===================================================================================================
; Subroutine to update the bullets.
; Checks if bullet is active --> check if it collided, else --> move it
;===================================================================================================
.proc update_bullets
	jmp :+
done:
	rts
:
; Loop through the bullets
    ldx #$FF                            ; Reset X
label:
    inx                                 ; ++x
    cpx #6                              ; If x == 6 we checked all 6 bullets
    beq done                            ; Skip ahead
    lda var_bullets_arr, x              ; Load the value at var_bullets_arr, x
    and #%00000100                      ; Mask out all bits except bit 2
    beq label                           ; If bit 2 is 0 (result is 0), branch (means bullet is not active we dont need to update)

; Bullet is active
; First check if it collided, if so reset it and go next
; Otherwise change its position; positionY = oam + x * 4
; positionX = oam+3 + x * 4

    txa                                 ; Transfer X to A
	pha									; Push X to stack for later
    tay                                 ; Transfer A to Y (X to Y)
    MULTIPLY_X_BY_4 					; Get X = X * 4

; Collision check
	pla									; Get X back from the stack
	tay									; Put X in Y
	pha									; Push it back on the stack if we need it later
    lda var_bullets_arr, y              ; Load the value at var_bullets_arr, x
    and #%10000000                      ; Check Collision Bit
	beq :+								; If no collision go to moving the bullet
	lda var_bullets_arr, y				; Load the value at var_bullets_arr, x
    and #%01111011                      ; Flip the active bit, set to inactive and reset collision as well
	sta var_bullets_arr, y				; Store it back at var_bullets_arr, x
	lda #$F0							; Reset the Y coord to be out of screen
	sta oam,x							; 
	pla									; We're jumping back so pull back X
	tax									; 
	jmp label							; Go to next bullet
:

	jsr move_bullet

	pla									; Pull back X
	tax									;
	jmp label							; Jump back to loop the rest
.endproc

;===================================================================================================
; Subroutine to move the bullet in its given direction.
;===================================================================================================
.proc move_bullet
	@up_direction 		= %00000000
	@right_direction 	= %00000001
	@down_direction 	= %00000010
	@left_direction 	= %00000011
	@movement_x			= oam+3
	@movement_y			= oam
	@direction			= temp_00

	lda var_bullets_arr, y				; Load the value at var_bullets_arr, x
	and #%00000011						; Only keep the direction
	beq @move_bullet_up					; If bullet is direction up (%00000000) move up

	cmp #@right_direction				; If bullet is direction right, move right
	beq @move_bullet_right

	cmp #@down_direction				; If bullet is direction down, move down
	beq @move_bullet_down

	cmp #@left_direction				; If bullet is direction left, move left
	beq @move_bullet_left

; All four movements work the same
@move_bullet_up:
	lda #@up_direction					; Load the direction
	sta @direction						; Set the temporary direction to the movement direction

	dec @movement_y,x					; Move bullet one pixel
	jsr check_wall_collision			; Check if bullet collides with the wall

	dec @movement_y,x					; Move it one more pixel
	jsr check_wall_collision			; Check if bullet collides with the wall

	jmp @return							; return
@move_bullet_right:
	lda #@right_direction
	sta @direction

	inc @movement_x,x  
	jsr check_wall_collision

    inc @movement_x,x
	jsr check_wall_collision

	jmp @return
@move_bullet_down:
	lda #@down_direction
	sta @direction

	inc @movement_y,x
	jsr check_wall_collision	

	inc @movement_y,x
	jsr check_wall_collision

	jmp @return
@move_bullet_left:
	lda #@left_direction
	sta @direction

	dec @movement_x,x  
	jsr check_wall_collision

	dec @movement_x,x  
	jsr check_wall_collision
@return:
	rts
.endproc

;===================================================================================================
; Subroutine to check if a bullet hit a viewport wall.
;===================================================================================================
.proc check_wall_collision
; If sprite moves out of screen disable bullet
; First check if the bullet is still valid has a previous check may have disabled it
	lda var_bullets_arr, y				; Load the value at var_bullets_arr, x (Y has the value of X)
	and #%00000100						; Check if it's valid
	beq @return							; If not return

	@right_direction 	= %00000001
	@down_direction 	= %00000010
	@left_direction 	= %00000011
	@movement_x			= oam+3
	@movement_y			= oam
	@bullet_direction 	= temp_00

	lda @bullet_direction				; Load the direction we saved previously
	beq @check_up						; If direction is up check upper bound

	cmp #@right_direction				; Check if direction is right
	beq @check_right					; If so, check right bound

	cmp #@down_direction				; Check if direction is down
	beq @check_down						; If so, check down bound

	cmp #@left_direction				; Check if direction is left
	beq @check_left 					; If so, check left bound

; Again all checks work similarily
@check_up:
	lda @movement_y, x					; Load the corresponding movement
	cmp #255           					; Check if sprite is out of screen
	bne @return                			; If not return
	jmp @disable_bullet					; If so, jump to disable bullet code

@check_right:
	lda @movement_x, x
	cmp #255           					
	bne @return                			
	jmp @disable_bullet

@check_down:
	lda @movement_y, x
	bne @return                			
	jmp @disable_bullet

@check_left:
	lda @movement_x, x
	bne @return                			
	jmp @disable_bullet

@disable_bullet:
	lda var_bullets_arr, y				; Load the value at var_bullets_arr, x (Y has the value of X)
    and #%01111011                      ; Flip the active bit, set to inactive and reset collision as well
	sta var_bullets_arr, y				; Store it back at var_bullets_arr, x
	lda #$F0							; Reset the Y coord to be out of screen (just in case)
	sta oam,x							; 

@return:
	rts									; return
.endproc

;===================================================================================================
; Subroutine to check if we can shoot again.
;===================================================================================================
.proc check_can_shoot
	lda var_last_frame_count			; Load last frame fired
	beq	@return							; If it is zero return
	dec var_last_frame_count			; Else decrease it
	bne @return							; if it's not zero return
	lda var_bools						; Else load bools
	ora #%00000001						; Flip canShoot back to True
	sta var_bools						; Store it
@return:
	rts									; return
.endproc

;===================================================================================================
; Subroutine to check if the center pixel of a bullet is colliding with a letter.
; Erase the letter and mark bullet has collided.
;===================================================================================================
.proc check_background_collision
; Loop through every bullet, check if it's active. If so check the tile at the center 
; (for simplicity otherwise we can use the tip of the bullet but that requires calculating it based on the direction etc.. or use a bounding box)
; if the center of the sprite is in a tile that is not #$00 or whatever background color, set its colliding flag and then loop next bullet

; Loop through the bullets
    ldx #$FF                            ; Reset X
label:
    inx                                 ; ++x
    cpx #6                              ; If x == 6 we checked all 6 bullets
    beq done                            ; Skip ahead
    lda var_bullets_arr, x                  ; Load the value at var_bullets_arr, x
    and #%00000100                      ; Mask out all bits except bit 2
    beq label                           ; If bit 2 is 0 (result is 0), branch (means bullet is not active we dont need to update)

	txa									; Transfer X to A
	pha									; Store it on the stack
	tay                                 ; Transfer A to Y (X to Y)

	MULTIPLY_X_BY_4 					; Get X = X * 4

	jsr find_bg_tile_position			; Find the Background tile in VRAM on which the center pixel of the bullet is

	pla									; Load X from the stack
	tax

	jsr clear_background_tile			; Check if the background tile is empty or not, if not delete it and mark bullet as collided

	jmp label							; Jump back to loop the rest
done:
	rts									; return
.endproc

;===================================================================================================
; Subroutine to clear the background tile the bullet collided with.
;===================================================================================================
.proc clear_background_tile
; Define the target nametable address
	SET_PPU_VRAM_ADRESS temp_00_ptr

	lda PPU_DATA						; Load the tile
	lda PPU_DATA						; Load it again, I think because each tile is 2bytes and we need to check the second byte. regardless it would often load 0 if I load it only once
	and #$FF							; Check if the Tile is empty 
	beq :+								; If it is, do nothing so jump to end
	and #$DF							; Check if the Tile is a Space (FF - 10)
	beq :+								; If it is, do nothing so jump to end
	lda var_bullets_arr, x				; Load the value at var_bullets_arr, x
    ora #%10000000                      ; Mark bullet as collided
	sta var_bullets_arr, x				; 

	SET_PPU_VRAM_ADRESS temp_00_ptr

	lda #$00							; 
	sta PPU_DATA						; Delete the background tile that was collided
	:

	rts									; return
.endproc


;===================================================================================================
; Legacy code to reuse or throw away later.
;===================================================================================================
; 	; Check if the sprite movement is right or left, if so we want to add or remove one to the tile position we want
; 	lda var_bullets_arr                         ; Load the sprite info
;     and #%00000011                          ; Mask out all but the two LSBs
;     cmp #%00000001                          ; Check if the two LSBs are 01 (RIGHT)
;     beq add_one                             ; If so, jump to add one to X
;     cmp #%00000011                          ; Check if the two LSBs are 11 (LEFT)
;     beq subtract_one                        ; If so, jump to subtract one to X
;     jmp skip                                ; Otherwise, skip adjustment
; add_one:
;     inc temp_00                           ; ++X
;     jmp skip                                ; Skip over
; subtract_one:
;     dec temp_00                           ; --X
; skip:


; 	lda var_bullets_arr                         ; Load the sprite info
;     and #%00000011                          ; Mask out all but the two LSBs
;     cmp #%00000010                          ; Check if the two LSBs are 01 (DOWN)
;     beq add_to_Y                            ; If so, jump to add one to Y
;     cmp #%00000000                          ; Check if the two LSBs are 11 (UP)
;     beq subtract_from_Y                     ; If so, jump to subtract one to Y
;     jmp end                                 ; Otherwise, skip adjustment
; add_to_Y:
;     iny                                     ; ++Y
;     jmp end                                 ; Skip over
; subtract_from_Y:
;     dey                                     ; --Y
; end: ; Need to check for edge cases, currently it's wrapping around

;; Can reuse this for transitions
; .proc clear_background_tile
; ; Define the target nametable address
;     lda temp_00_ptr                 ; High byte of the address
;     sta PPU_ADDRESS                   ; Write high byte to PPU_ADDRESS
;     lda temp_00_ptr+1               ; Low byte of the address
;     sta PPU_ADDRESS                   ; Write low byte to PPU_ADDRESS

; ; Write the tile index (e.g., tile $03)
;     lda #$00              ; Tile index to write
;     sta PPU_DATA                         ; Write to PPU_DATA

; 	rts
; .endproc
