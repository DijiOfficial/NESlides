;===================================================================================================
; NMI (Non-Maskable Interrupt) is triggered by vertical blanking, used for rendering and updates.
;===================================================================================================

; 7  bit  0
; ---- ----
; VPHB SINN
; |||| ||||
; |||| ||++- Base nametable address
; |||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
; |||| |+--- VRAM address increment per CPU read/write of PPUDATA
; |||| |     (0: add 1, going across; 1: add 32, going down)
; |||| +---- Sprite pattern table address for 8x8 sprites
; ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
; |||+------ Background pattern table address (0: $0000; 1: $1000)
; ||+------- Sprite size (0: 8x8 pixels; 1: 8x16 pixels â€“ see PPU OAM#Byte 1)
; |+-------- PPU master/slave select
; |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
; +--------- Vblank NMI enable (0: off, 1: on)

.proc nmi
;===================================================================================================

	PUSH_REGISTERS
	
;===================================================================================================

    inc var_nmi_count
	lda var_nmi_ready                  ; Check whether we're ready to render, skip to end if not
	beq end
    
;===================================================================================================

	inc var_frame_count                ; Increase the frame count and cap it at 50
	inc var_frame_count_unclamped
	jsr frame_count_cap

	jsr check_background_collision     ; Check the background collision

	jsr update_blinking_text		   ; Update the blinking text
;===================================================================================================

.if DEBUG
    DEBUG_NMI							; This enforces the color palette every frame, it should be changed to only update on button press
.endif

;===================================================================================================
    
	jsr transfer_oam                   ; Transfer the local OAM data into the PPU
	jsr update_background_color

	RESET_SCROLL

	ldx #NMI_SIG_CLEAR
	stx var_nmi_ready
	
	jmp end
	
;===================================================================================================

end:
	POP_REGISTERS
	
	rti
.endproc

.proc frame_count_cap
    @fps = 50
	lda var_frame_count
	cmp #@fps
	bne @return

	lda #0
	sta var_frame_count
	jsr update_time

@return:
	rts
.endproc

.proc update_time
	@sec = 60
    ldx var_elapsed_sec                ; Load elapsed seconds
	inx                                ; Increment the time: seconds + 1
	stx var_elapsed_sec                ; Store the new time
	
	lda var_elapsed_sec                ; Load elapsed seconds
	cmp #@sec                          ; Compare the time to 60 seconds
	bne @return                        ; If the time is not 60 seconds, return
	  lda #0                           ; Reset the time to 0
	  sta var_elapsed_sec              ; Store the new seconds
	  ldx var_elapsed_min              ; Load elapsed minutes
	  inx                              ; Increment the time: minutes + 1
	  stx var_elapsed_min              ; Store the new time
@return:
	rts	
.endproc

.proc update_background_color
    @attr_count = 64
	@start_index = 0
	@color_palette_1 = 0   ; $00
	@color_palette_2 = 85  ; $55
	@color_palette_3 = 170 ; $AA
	@color_palette_4 = 255 ; FF
	
	lda var_bools
	and #%00000010                     ; Now Check if we are in fun mode or not
	beq @return                        ; If not go back to not fun controls
	
    SET_PPU_ADDRESS NT1_ATTR           ; Set the PPU address to the attribute table of the first nametable
    ldx #@attr_count                            ; 64 bytes to update
    ldy #@start_index                             ; Index for the attribute table
    CONDITIONAL_LOAD var_current_bg_state, 0, var_current_bg_color, @color_palette_1
    CONDITIONAL_LOAD var_current_bg_state, 1, var_current_bg_color, @color_palette_2
    CONDITIONAL_LOAD var_current_bg_state, 2, var_current_bg_color, @color_palette_3
    CONDITIONAL_LOAD var_current_bg_state, 3, var_current_bg_color, @color_palette_4
    lda var_current_bg_color           ; Load the color to write to the attribute table
:
    sta PPU_DATA                       ; Write the color to the attribute table
    iny                                ; Increment the index
    dex                                ; Decrement the counter
    bne :-                             ; Loop until all 64 bytes are updated
	
@return:
    rts
.endproc

.proc transfer_oam
    ; Set the starting address to write to in the PPUs OAM
    lda #$00
    sta OAM_ADDRESS
   
    lda #>oam           ; Load the high byte of the local OAM's address
    sta OAM_DMA      ; Set the high byte of the local OAM's address in the OAM_DMA, effectively triggering the DMA

    rts
.endproc

;===================================================================================================
; Make the "play select" text blink
;===================================================================================================
.proc update_blinking_text
	lda var_bools						; Check if the text is displayed
	and #%01000000						;
	beq :+								; If the text is not displayed, ignore the state of the game and display it

	lda var_gamestate
	cmp #GAME_STATE::MENU
	bne @return
:
	@fps = 50
	@blinking_speed = 25
	
	lda var_frame_count					; Load the elapsed frames
@check_difference:
	sec
	sbc var_blinking_text_count			; Subtract last time to delta time (dt - t)

	bpl @positive						; If positive, continue
	lda var_frame_count					; Reload the elapsed frames
	clc									;
	adc #@fps							; Add 50 frames to the elapsed frames
	jmp @check_difference				; Redo the substraction (will be positive this time)

@positive:
	sec
	sbc #@blinking_speed				; Number of frames to wait before updating the blinking text
	bmi @return							; If the elapsed frames are less than blinking_speed, return

	lda var_frame_count					; Load the elapsed frames
	sta var_blinking_text_count			; Store the elapsed seconds in the blinking text count

    @attr_count = 64
	@start_index = 26
	@end_index = 30

	@color_palette_1 = 00  
	@color_palette_3 = 255
	
    SET_PPU_ADDRESS NT1_ATTR           	; Set the PPU address to the attribute table of the first nametable
    ldx #@attr_count					; 64 bytes to update
    ldy #0								; Index for the attribute table

	lda var_bools						; Check if the text should be displayed
	and #%01000000						;
    bne :+								; If the text should not be displayed, switch palette to black
	lda var_bools						; 
    ora #%01000000						; Flip the bit
	sta var_bools						;
	lda #@color_palette_1				; Load the default color

	jmp @test
:
	lda var_bools
	and #%10111111						; FLip the bit
	sta var_bools
	lda #@color_palette_3				; Load the black(background) color

@test:									; Now write the color to the attribute table
    cpy #@start_index                   ; Check if Y is less than start index
    bcc @do_nothing                     ; If Y < start, do nothing ; Change this to bcs for funny effect (trust bro)

    cpy #@end_index                     ; Check if Y exceeds end index
    beq @return                        	; If Y > end, quit the loop

    sta PPU_DATA                       	; Write the color to the attribute table

	iny									; Increment the index
    dex                                	; Decrement the counter
    bne @test                          	; Continue looping if X != 0

	jmp @return

@do_nothing:
	iny									; Increment the index
	dex									; Decrement the counter
	pha									; Save the palette
	lda PPU_DATA						; Read the PPU data to auto increment the address
	pla									; Restore the palette
	jmp @test							; Continue looping

@return:
	rts
.endproc