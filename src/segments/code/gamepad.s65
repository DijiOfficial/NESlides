.proc gamepad_poll
	lda gamepad                            ; Load current state of gamepad to check button press/released
	pha                                    ; Push it on the stack

	; strobe the gamepad to latch current button state
	lda #1
	sta JOYPAD1
	lda #0
	sta JOYPAD1

	ldx #8                                 ; Read 8 bytes from the interface at $4016 (yes bytes not bits the controller returns a whole byte based on the bit of the current button)
loop:
	pha                                    ; Push to the stack the values we are reading
	lda JOYPAD1                            ; Get the value of the current button we're checking
	and #%00000011                         ; Only keep the low two bits (the rest is noise but do we need to mask it?)                   
	cmp #%00000001                         ; Compare the lsb it contains the information of the current button we're checking
	pla                                    ; Load back the values for the rotation
	ror                                    ; rotate carry into gamepad variable
	dex                                    ; --x
	bne loop                               ; If x != 0 loop back

	sta gamepad                            ; Store the values into gamepad
	pla                                    ; Load values of gamepad from previous frame
	sta temp_byte                          ; temp storage
	eor gamepad                            ; old_gamepad XOR gamepad
	and temp_byte                          ; (old_gamepad XOR gamepad) AND old_gamepad
	sta gamepad_released                   ; Store the released buttons

	rts                                    ; return
.endproc